worker_processes 1;

events {}

http {
    resolver 127.0.0.11 valid=30s;

    lua_shared_dict my_cache 10m;

    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=img_cache:10m max_size=100m inactive=60m use_temp_path=off;

    upstream spring_app {
        server app1:8080;
        server app2:8080;
        server app3:8080;
    }

    server {
        listen 80;

        location /images/ {
            proxy_cache img_cache;
            proxy_cache_key "$scheme$host$request_uri";
            proxy_cache_valid 200 302 60m;
            proxy_cache_valid 404 1m;
            proxy_pass http://spring_app;

            proxy_set_header Host $http_host;
            proxy_set_header X-Forwarded-Host $http_host;
            proxy_set_header X-Forwarded-Port $server_port;
            proxy_set_header X-Forwarded-Proto $scheme;

            add_header X-Cache-Status $upstream_cache_status;
        }

        location /internal-purge {
            content_by_lua_block {
                local ok = os.execute("rm -rf /var/cache/nginx/*")
                if ok then
                    ngx.say("Cache purged")
                else
                    ngx.say("Failed to purge")
                end
            }
        }

        location /purge/all {
            content_by_lua_block {
                local http = require "resty.http"
                local servers = {
                    "http://nginx1/internal-purge",
                    "http://nginx2/internal-purge",
                    "http://nginx3/internal-purge"
                }

                for _, url in ipairs(servers) do
                    local httpc = http.new()
                    httpc:set_timeout(2000)
                    local res, err = httpc:request_uri(url, { method = "GET" })
                    if not res then
                        ngx.say("Failed to purge " .. url .. ": " .. err)
                    else
                        ngx.say("Purged " .. url .. ": " .. res.body)
                    end
                end
            }
        }

        location / {
            proxy_pass http://spring_app;

            proxy_set_header Host $http_host;
            proxy_set_header X-Forwarded-Host $http_host;
            proxy_set_header X-Forwarded-Port $server_port;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}
